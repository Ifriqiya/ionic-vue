{
  "ion-page": {
    "description": "`IonPage` is a specialized component that is meant to be the parent container for an Ionic Page, which typically consists of `IonHeader` and `IonContent` components.",
    "attributes": [
      "willPresent"
    ]
  },
  "ion-action-sheet": {
    "attributes": [
      "animated",
      "backdrop-dismiss",
      "css-class",
      "header",
      "keyboard-close",
      "mode",
      "sub-header",
      "translucent"
    ],
    "description": "An Action Sheet is a dialog that displays a set of options. It appears on top of the app's content, and must be manually dismissed by the user before they can resume interaction with the app. Destructive options are made obvious in `ios` mode. There are multiple ways to dismiss the action sheet, including tapping the backdrop or hitting the escape key on desktop."
  },
  "ion-alert": {
    "attributes": [
      "animated",
      "backdrop-dismiss",
      "css-class",
      "header",
      "keyboard-close",
      "message",
      "mode",
      "sub-header",
      "translucent"
    ],
    "description": "An Alert is a dialog that presents users with information or collects information from the user using inputs. An alert appears on top of the app's content, and must be manually dismissed by the user before they can resume interaction with the app. It can also optionally have a `header`, `subHeader` and `message`."
  },
  "ion-app": {
    "attributes": [],
    "description": "App is a container element for an Ionic application. There should only be one `<ion-app>` element per project. An app can have many Ionic components including menus, headers, content, and footers. The overlay components get appended to the `<ion-app>` when they are presented."
  },
  "ion-avatar": {
    "attributes": [],
    "description": "Avatars are circular components that usually wrap an image or icon. They can be used to represent a person or an object.\n\nAvatars can be used by themselves or inside of any element. If placed inside of an `ion-chip` or `ion-item`, the avatar will resize to fit the parent component. To position an avatar on the left or right side of an item, set the slot to `start` or `end`, respectively."
  },
  "ion-back-button": {
    "attributes": [
      "color",
      "default-href",
      "disabled",
      "icon",
      "mode",
      "text",
      "type"
    ],
    "description": "The back button navigates back in the app's history upon click. It is smart enough to know what to render based on the mode and when to show based on the navigation stack.\n\nTo change what is displayed in the back button, use the `text` and `icon` properties."
  },
  "ion-backdrop": {
    "attributes": [
      "stop-propagation",
      "tappable",
      "visible"
    ],
    "description": "Backdrops are full screen components that overlay other components. They are useful behind components that transition in on top of other content and can be used to dismiss that component."
  },
  "ion-badge": {
    "attributes": [
      "color",
      "mode"
    ],
    "description": "Badges are inline block elements that usually appear near another element. Typically they contain a number or other characters. They can be used as a notification that there are additional items associated with an element and indicate how many items there are."
  },
  "ion-button": {
    "attributes": [
      "button-type",
      "color",
      "disabled",
      "download",
      "expand",
      "fill",
      "href",
      "mode",
      "rel",
      "router-direction",
      "shape",
      "size",
      "strong",
      "target",
      "type",
      "replace"
    ],
    "description": "Buttons provide a clickable element, which can be used in forms, or anywhere that needs simple, standard button functionality. They may display text, icons, or both. Buttons can be styled with several attributes to look a specific way."
  },
  "ion-buttons": {
    "attributes": [
      "collapse"
    ],
    "description": "The Buttons component is a container element. Buttons placed in a toolbar should be placed inside of the `<ion-buttons>` element.\n\nThe `<ion-buttons>` element can be positioned inside of the toolbar using a named slot. The below chart has a description of each slot.\n\n| Slot         | Description                                                                                              |\n|--------------|----------------------------------------------------------------------------------------------------------|\n| `secondary`  | Positions element to the `left` of the content in `ios` mode, and directly to the `right` in `md` mode.  |\n| `primary`    | Positions element to the `right` of the content in `ios` mode, and to the far `right` in `md` mode.      |\n| `start`      | Positions to the `left` of the content in LTR, and to the `right` in RTL.                                |\n| `end`        | Positions to the `right` of the content in LTR, and to the `left` in RTL.                                |"
  },
  "ion-card": {
    "attributes": [
      "button",
      "color",
      "disabled",
      "download",
      "href",
      "mode",
      "rel",
      "router-direction",
      "target",
      "type",
      "replace"
    ],
    "description": "Cards are a standard piece of UI that serves as an entry point to more detailed\ninformation. A card can be a single component, but is often made up of some\nheader, title, subtitle, and content. `ion-card` is broken up into several\nsub-components to reflect this. Please see `ion-card-content`,\n`ion-card-header`, `ion-card-title`, `ion-card-subtitle`."
  },
  "ion-card-content": {
    "attributes": [
      "mode"
    ],
    "description": "`ion-card-content` is child component of `ion-card` that adds some content padding.\nIt is recommended that any text content for a card should be placed in an `ion-card-content`."
  },
  "ion-card-header": {
    "attributes": [
      "color",
      "mode",
      "translucent"
    ],
    "description": "`ion-card-header` is a header component for `ion-card`."
  },
  "ion-card-subtitle": {
    "attributes": [
      "color",
      "mode"
    ],
    "description": "`ion-card-subtitle` is a child component of `ion-card`"
  },
  "ion-card-title": {
    "attributes": [
      "color",
      "mode"
    ],
    "description": "`ion-card-title` is a child component of `ion-card`"
  },
  "ion-checkbox": {
    "attributes": [
      "checked",
      "color",
      "disabled",
      "indeterminate",
      "mode",
      "name",
      "value"
    ],
    "description": "Checkboxes allow the selection of multiple options from a set of options. They appear as checked (ticked) when activated. Clicking on a checkbox will toggle the `checked` property. They can also be checked programmatically by setting the `checked` property."
  },
  "ion-chip": {
    "attributes": [
      "color",
      "mode",
      "outline"
    ],
    "description": "Chips represent complex entities in small blocks, such as a contact. A chip can contain several different elements such as avatars, text, and icons."
  },
  "ion-col": {
    "attributes": [
      "offset",
      "offset-lg",
      "offset-md",
      "offset-sm",
      "offset-xl",
      "offset-xs",
      "pull",
      "pull-lg",
      "pull-md",
      "pull-sm",
      "pull-xl",
      "pull-xs",
      "push",
      "push-lg",
      "push-md",
      "push-sm",
      "push-xl",
      "push-xs",
      "size",
      "size-lg",
      "size-md",
      "size-sm",
      "size-xl",
      "size-xs"
    ],
    "description": "Columns are cellular components of the [grid](../grid) system and go inside of a [row](../row).\nThey will expand to fill their row. All content within a grid should go inside of a column.\n\nSee [Grid Layout](/docs/layout/grid) for more information."
  },
  "ion-content": {
    "attributes": [
      "color",
      "force-overscroll",
      "fullscreen",
      "scroll-events",
      "scroll-x",
      "scroll-y"
    ],
    "description": "The content component provides an easy to use content area with some useful methods\nto control the scrollable area. There should only be one content in a single\nview.\n\nContent, along with many other Ionic components, can be customized to modify its padding, margin, and more using the global styles provided in the [CSS Utilities](/docs/layout/css-utilities) or by individually styling it using CSS and the available [CSS Custom Properties](#css-custom-properties)."
  },
  "ion-datetime": {
    "attributes": [
      "cancel-text",
      "day-names",
      "day-short-names",
      "day-values",
      "disabled",
      "display-format",
      "display-timezone",
      "done-text",
      "hour-values",
      "max",
      "min",
      "minute-values",
      "mode",
      "month-names",
      "month-short-names",
      "month-values",
      "name",
      "picker-format",
      "placeholder",
      "readonly",
      "value",
      "year-values"
    ],
    "description": "Datetimes present a picker interface from the bottom of a page, making it easy for\nusers to select dates and times. The picker displays scrollable columns that can be\nused to individually select years, months, days, hours and minute values. Datetimes\nare similar to the native `input` elements of type `datetime-local`, however, Ionic's\nDatetime component makes it easy to display the date and time in a preferred format,\nand manage the datetime values."
  },
  "ion-fab": {
    "attributes": [
      "activated",
      "edge",
      "horizontal",
      "vertical"
    ],
    "description": "Fabs are container elements that contain one or more fab buttons. They should be placed in a fixed position that does not scroll with the content. Fab should have one main fab-button. Fabs can also contain fab-lists which contain related buttons that show when the main fab button is clicked. The same fab container can contain several [fab-list](../fab-list) elements with different side values."
  },
  "ion-fab-button": {
    "attributes": [
      "activated",
      "close-icon",
      "color",
      "disabled",
      "download",
      "href",
      "mode",
      "rel",
      "router-direction",
      "show",
      "size",
      "target",
      "translucent",
      "type",
      "replace"
    ],
    "description": "Floating Action Buttons (FABs) represent the primary action in an application. By default, they have a circular shape. When pressed, the button may open more related actions. As the name suggests, FABs generally float over the content in a fixed position. This is not achieved exclusively by using an `<ion-fab-button>FAB</ion-fab-button>`. They need to be wrapped with an `<ion-fab>` component in order to be fixed over the content.\n\nIf the FAB button is not wrapped with `<ion-fab>`, it will scroll with the content. FAB buttons have a default size, a mini size and can accept different colors:"
  },
  "ion-fab-list": {
    "attributes": [
      "activated",
      "side"
    ],
    "description": "The `ion-fab-list` element is a container for multiple fab buttons. This collection of fab buttons contains actions related to the main fab button and is flung out on click. To specify what side the buttons should appear on, set the `side` property to 'start', 'end', 'top', 'bottom'"
  },
  "ion-footer": {
    "attributes": [
      "mode",
      "translucent"
    ],
    "description": "Footer is a root component of a page that sits at the bottom of the page.\nFooter can be a wrapper for ion-toolbar to make sure the content area is sized correctly."
  },
  "ion-grid": {
    "attributes": [
      "fixed"
    ],
    "description": "The grid is a powerful mobile-first flexbox system for building custom layouts.\n\nIt is composed of three units — a grid, [row(s)](../row) and [column(s)](../col). Columns will expand to fill the row, and will resize to fit additional columns. It is based on a 12 column layout with different breakpoints based on the screen size. The number of columns can be customized using CSS.\n\nSee the [Responsive Grid documentation](/docs/layout/grid) for more information."
  },
  "ion-header": {
    "attributes": [
      "collapse",
      "mode",
      "translucent"
    ],
    "description": "Header is a parent component that holds the toolbar component.\nIt's important to note that ion-header needs to be the one of the three root elements of a page"
  },
  "ion-img": {
    "attributes": [
      "alt",
      "src"
    ],
    "description": "Img is a tag that will lazily load an image when ever the tag is in the viewport. This is extremely useful when generating a large list as images are only loaded when they're visible. The component uses [Intersection Observer](https://caniuse.com/#feat=intersectionobserver) internally, which is supported in most modern browser, but falls back to a `setTimeout` when it is not supported."
  },
  "ion-infinite-scroll": {
    "attributes": [
      "disabled",
      "position",
      "threshold"
    ],
    "description": "The Infinite Scroll component calls an action to be performed when the user scrolls a specified distance from the bottom or top of the page.\n\nThe expression assigned to the `ionInfinite` event is called when the user reaches that defined distance. When this expression has finished any and all tasks, it should call the `complete()` method on the infinite scroll instance."
  },
  "ion-infinite-scroll-content": {
    "attributes": [
      "loading-spinner",
      "loading-text"
    ],
    "description": "The `ion-infinite-scroll-content` component is the default child used by the `ion-infinite-scroll`. It displays an infinite scroll spinner that looks best based on the platform and changes the look depending on the infinite scroll's state. The default spinner can be changed and text can be added by setting the `loadingSpinner` and `loadingText` properties."
  },
  "ion-input": {
    "attributes": [
      "accept",
      "autocapitalize",
      "autocomplete",
      "autocorrect",
      "autofocus",
      "clear-input",
      "clear-on-edit",
      "color",
      "debounce",
      "disabled",
      "enterkeyhint",
      "inputmode",
      "max",
      "maxlength",
      "min",
      "minlength",
      "mode",
      "multiple",
      "name",
      "pattern",
      "placeholder",
      "readonly",
      "required",
      "size",
      "spellcheck",
      "step",
      "type",
      "value"
    ],
    "description": "The input component is a wrapper to the HTML input element with custom styling and additional functionality. It accepts most of the same properties as the HTML input, but works great on desktop devices and integrates with the keyboard on mobile devices.\n\nIt is meant for text `type` inputs only, such as `\"text\"`, `\"password\"`, `\"email\"`, `\"number\"`, `\"search\"`, `\"tel\"`, and `\"url\"`. It supports all standard text input events including keyup, keydown, keypress, and more."
  },
  "ion-item": {
    "attributes": [
      "button",
      "color",
      "detail",
      "detail-icon",
      "disabled",
      "download",
      "href",
      "lines",
      "mode",
      "rel",
      "router-direction",
      "target",
      "type",
      "replace"
    ],
    "description": "Items are elements that can contain text, icons, avatars, images, inputs, and any other native or custom elements. Generally they are placed in a list with other items. Items can be swiped, deleted, reordered, edited, and more."
  },
  "ion-item-divider": {
    "attributes": [
      "color",
      "mode",
      "sticky"
    ],
    "description": "Item Dividers are block elements that can be used to separate items in a list. They are similar to list headers, but instead of being placed at the top of a list, they should go in between groups of items."
  },
  "ion-item-group": {
    "attributes": [],
    "description": "Item groups are containers that organize similar items together. They can contain item dividers to divide the items into multiple sections. They can also be used to group sliding items."
  },
  "ion-item-option": {
    "attributes": [
      "color",
      "disabled",
      "download",
      "expandable",
      "href",
      "mode",
      "rel",
      "target",
      "type",
      "replace"
    ],
    "description": "The option button for an `ion-item-sliding`. Must be placed inside of an `<ion-item-options>`.\nYou can combine the `ionSwipe` event and the `expandable` directive to create a full swipe\naction for the item."
  },
  "ion-item-options": {
    "attributes": [
      "side"
    ],
    "description": "The option buttons for an `ion-item-sliding`. These buttons can be placed either on the [start or end side](#side-description).\nYou can combine the `ionSwipe` event plus the `expandable` directive to create a full swipe action for the item."
  },
  "ion-item-sliding": {
    "attributes": [
      "disabled"
    ],
    "description": "A sliding item contains an item that can be dragged to reveal buttons. It requires an [item](../item) component as a child. All options to reveal should be placed in the [item options](../item-options) element."
  },
  "ion-label": {
    "attributes": [
      "color",
      "mode",
      "position"
    ],
    "description": "Label is a wrapper element that can be used in combination with `ion-item`, `ion-input`, `ion-toggle`, and more. The position of the label inside of an item can be inline, fixed, stacked, or floating."
  },
  "ion-list": {
    "attributes": [
      "inset",
      "lines",
      "mode"
    ],
    "description": "Lists are made up of multiple rows of items which can contain text, buttons, toggles,\nicons, thumbnails, and much more. Lists generally contain items with similar data content, such as images and text.\n\nLists support several interactions including swiping items to reveal options, dragging to reorder items within the list, and deleting items."
  },
  "ion-list-header": {
    "attributes": [
      "color",
      "lines",
      "mode"
    ],
    "description": "ListHeader a header component for a list.\nUnlike ItemDivider, ListHeaders are styled to be stand-out from the rest of the list items."
  },
  "ion-loading": {
    "attributes": [
      "animated",
      "backdrop-dismiss",
      "css-class",
      "duration",
      "keyboard-close",
      "message",
      "mode",
      "show-backdrop",
      "spinner",
      "translucent"
    ],
    "description": "An overlay that can be used to indicate activity while blocking user interaction. The loading indicator appears on top of the app's content, and can be dismissed by the app to resume user interaction with the app. It includes an optional backdrop, which can be disabled by setting `showBackdrop: false` upon creation."
  },
  "ion-menu": {
    "attributes": [
      "content-id",
      "disabled",
      "max-edge-start",
      "menu-id",
      "side",
      "swipe-gesture",
      "type"
    ],
    "description": "The Menu component is a navigation drawer that slides in from the side of the current view.\nBy default, it slides in from the left, but the side can be overridden.\nThe menu will be displayed differently based on the mode, however the display type can be changed to any of the available menu types.\nThe menu element should be a sibling to the root content element.\nThere can be any number of menus attached to the content.\nThese can be controlled from the templates, or programmatically using the MenuController."
  },
  "ion-menu-button": {
    "attributes": [
      "auto-hide",
      "color",
      "disabled",
      "menu",
      "mode",
      "type"
    ],
    "description": "Menu Button is component that automatically creates the icon and functionality to open a menu on a page."
  },
  "ion-menu-toggle": {
    "attributes": [
      "auto-hide",
      "menu"
    ],
    "description": "The MenuToggle component can be used to toggle a menu open or closed.\n\nBy default, it's only visible when the selected menu is active. A menu is active when it can be opened/closed. If the menu is disabled or it's being presented as a split-pane, the menu is marked as non-active and ion-menu-toggle hides itself.\n\nIn case it's desired to keep `ion-menu-toggle` always visible, the `autoHide` property can be set to `false`."
  },
  "ion-modal": {
    "attributes": [
      "animated",
      "backdrop-dismiss",
      "component",
      "css-class",
      "keyboard-close",
      "mode",
      "show-backdrop",
      "swipe-to-close"
    ],
    "description": "A Modal is a dialog that appears on top of the app's content, and must be dismissed by the app before interaction can resume. It is useful as a select component when there are a lot of options to choose from, or when filtering items in a list, as well as many other use cases."
  },
  "ion-nav": {
    "attributes": [
      "animated",
      "root",
      "swipe-gesture"
    ],
    "description": "Nav is a standalone component for loading arbitrary components and pushing new components on to the stack.\n\nUnlike Router Outlet, Nav is not tied to a particular router. This means that if we load a Nav component, and push other components to the stack, they will not affect the app's overall router. This fits use cases where you could have a modal, which needs its own sub-navigation, without making it tied to the apps URL."
  },
  "ion-nav-link": {
    "attributes": [
      "component",
      "router-direction"
    ],
    "description": "A navigation link is used to navigate to a specified component. The component can be navigated to by going `forward`, `back` or as a `root` component.\n\nIt is the element form of calling the `push()`, `pop()`, and `setRoot()` methods on the navigation controller."
  },
  "ion-note": {
    "attributes": [
      "color",
      "mode"
    ],
    "description": "Notes are text elements generally used as subtitles that provide more information. Notes are styled to appear grey by default. Notes can be used in an item as metadata text."
  },
  "ion-picker": {
    "attributes": [
      "animated",
      "backdrop-dismiss",
      "css-class",
      "duration",
      "keyboard-close",
      "mode",
      "show-backdrop"
    ],
    "description": "A Picker is a dialog that displays a row of buttons and columns underneath. It appears on top of the app's content, and at the bottom of the viewport."
  },
  "ion-popover": {
    "attributes": [
      "animated",
      "backdrop-dismiss",
      "component",
      "css-class",
      "event",
      "keyboard-close",
      "mode",
      "show-backdrop",
      "translucent"
    ],
    "description": "A Popover is a dialog that appears on top of the current page. It can be used for anything, but generally it is used for overflow actions that don't fit in the navigation bar."
  },
  "ion-progress-bar": {
    "attributes": [
      "buffer",
      "color",
      "mode",
      "reversed",
      "type",
      "value"
    ],
    "description": "ion-progress-bar is a horizontal progress bar to visualize the progression of an operation and activity. You can choose between two types: `determinate` and `indeterminate`."
  },
  "ion-radio": {
    "attributes": [
      "color",
      "disabled",
      "mode",
      "name",
      "value"
    ],
    "description": "Radios should be used inside of an [`ion-radio-group`](../radio-group). Pressing on a radio will check it. They can also be checked programmatically by setting the value property of the parent `ion-radio-group` to the value of the radio.\n\nWhen radios are inside of a radio group, only one radio in the group will be checked at any time. Pressing a radio will check it and uncheck the previously selected radio, if there is one. If a radio is not in a group with another radio, then both radios will have the ability to be checked at the same time."
  },
  "ion-radio-group": {
    "attributes": [
      "allow-empty-selection",
      "name",
      "value"
    ],
    "description": "A radio group is a group of [radio buttons](../radio). It allows\na user to select at most one radio button from a set. Checking one radio\nbutton that belongs to a radio group unchecks any previous checked\nradio button within the same group."
  },
  "ion-range": {
    "attributes": [
      "color",
      "debounce",
      "disabled",
      "dual-knobs",
      "max",
      "min",
      "mode",
      "name",
      "pin",
      "snaps",
      "step",
      "ticks",
      "value"
    ],
    "description": "The Range slider lets users select from a range of values by moving\nthe slider knob. It can accept dual knobs, but by default one knob\ncontrols the value of the range."
  },
  "ion-refresher": {
    "attributes": [
      "close-duration",
      "disabled",
      "pull-factor",
      "pull-max",
      "pull-min",
      "snapback-duration"
    ],
    "description": "The refresher provides pull-to-refresh functionality on a content component.\nThe pull-to-refresh pattern lets a user pull down on a list of data using touch\nin order to retrieve more data.\n\nData should be modified during the refresher's output events. Once the async\noperation has completed and the refreshing should end, call `complete()` on the\nrefresher."
  },
  "ion-refresher-content": {
    "attributes": [
      "pulling-icon",
      "pulling-text",
      "refreshing-spinner",
      "refreshing-text"
    ],
    "description": "The refresher content contains the text, icon and spinner to display during a pull-to-refresh. Ionic provides the pulling icon and refreshing spinner based on the platform. However, the default icon, spinner, and text can be customized based on the state of the refresher."
  },
  "ion-reorder": {
    "attributes": [],
    "description": "Reorder is a component that allows an item in a group of items to be dragged to change its order within that group. It must be used within an `ion-reorder-group` to provide a visual drag and drop interface.\n\n`ion-reorder` is the anchor used to drag and drop the items inside of the `ion-reorder-group`. See the [Reorder Group](../reorder-group) for more information on how to complete the reorder operation."
  },
  "ion-reorder-group": {
    "attributes": [
      "disabled"
    ],
    "description": "The reorder group is a wrapper component for items using the `ion-reorder` component. See the [Reorder documentation](../reorder/) for further information about the anchor component that is used to drag items within the `ion-reorder-group`.\n\nOnce the user drags an item and drops it in a new position, the `ionItemReorder` event is dispatched. A handler for it should be implemented that calls the `complete()` method.\n\nThe `detail` property of the `ionItemReorder` event includes all of the relevant information about the reorder operation, including the `from` and `to` indexes. In the context of reordering, an item moves `from` an index `to` a new index."
  },
  "ion-ripple-effect": {
    "attributes": [
      "type"
    ],
    "description": "The ripple effect component adds the [Material Design ink ripple interaction effect](https://material.io/develop/web/components/ripples/). This component can only be used inside of an `<ion-app>` and can be added to any component.\n\nIt's important to note that the parent should have [relative positioning](https://developer.mozilla.org/en-US/docs/Web/CSS/position) because the ripple effect is absolutely positioned and will cover the closest parent with relative positioning. The parent element should also be given the `ion-activatable` class, which tells the ripple effect that the element is clickable.\n\nThe default type, `\"bounded\"`, will expand the ripple effect from the click position outwards. To add a ripple effect that always starts in the center of the element and expands in a circle, add an `\"unbounded\"` type. It's recommended to add `overflow: hidden` to the parent element to avoid the ripple overflowing its container, especially with an unbounded ripple."
  },
  "ion-route": {
    "attributes": [
      "component",
      "url"
    ],
    "description": "The route component takes a component and renders it when the Browser URL matches the url property.\n\n> Note: this component should only be used with vanilla and Stencil JavaScript projects. For Angular projects, use [`ion-router-outlet`](../router-outlet) and the Angular router."
  },
  "ion-route-redirect": {
    "attributes": [
      "from",
      "to"
    ],
    "description": "A route redirect can only be used with an `ion-router` as a direct child of it.\n\n> Note: this component should only be used with vanilla and Stencil JavaScript projects. For Angular projects, use [`ion-router-outlet`](../router-outlet) and the Angular router.\n\nThe route redirect has two configurable properties:\n - `from`\n - `to`\n\nIt redirects \"from\" a URL \"to\" another URL. When the defined `ion-route-redirect` rule matches, the router will redirect from the path specified in the `from` property to the path in the `to` property. In order for a redirect to occur the `from` path needs to be an exact match to the navigated URL."
  },
  "ion-router": {
    "attributes": [
      "root",
      "use-hash"
    ],
    "description": "The router is a component for handling routing inside vanilla and Stencil JavaScript projects.\n\n> Note: this component should only be used with vanilla and Stencil JavaScript projects. For Angular projects, use [`ion-router-outlet`](../router-outlet) and the Angular router.\n\nApps should have a single `ion-router` component in the codebase.\nThis component controls all interactions with the browser history and it aggregates updates through an event system.\n\n`ion-router` is just a URL coordinator for the navigation outlets of ionic: `ion-nav` and `ion-tabs`.\n\nThat means the `ion-router` never touches the DOM, it does NOT show the components or emit any kind of lifecycle events, it just tells `ion-nav` and `ion-tabs` what and when to \"show\" based on the browser's URL.\n\nIn order to configure this relationship between components (to load/select) and URLs, `ion-router` uses a declarative syntax using JSX/HTML to define a tree of routes."
  },
  "ion-router-link": {
    "attributes": [
      "color",
      "href",
      "rel",
      "router-direction",
      "target",
      "replace"
    ],
    "description": "The router link component is used for navigating to a specified link. Similar to the browser's anchor tag, it can accept a href for the location, and a direction for the transition animation.\n\n> Note: this component should only be used with vanilla and Stencil JavaScript projects. For Angular projects, use an `<a>` and `routerLink` with the Angular router."
  },
  "ion-router-outlet": {
    "attributes": [
      "animated",
      "mode"
    ],
    "description": "Router outlet is a component used in routing within an Angular app. It behaves in a similar way to Angular's built-in router outlet component, but contains the logic for providing a stacked navigation, and animating views in and out.\n\n> Note: this component should only be used with Angular projects. For vanilla or Stencil JavaScript projects, use [`ion-router`](../router) and [`ion-route`](../route).\n\nAlthough router outlet has methods for navigating around, it's recommended to use the navigation methods in Angular's router."
  },
  "ion-row": {
    "attributes": [],
    "description": "Rows are horizontal components of the [grid](../grid) system and contain varying numbers of\n[columns](../col). They ensure the columns are positioned properly.\n\nSee [Grid Layout](/docs/layout/grid) for more information."
  },
  "ion-searchbar": {
    "attributes": [
      "animated",
      "autocomplete",
      "autocorrect",
      "cancel-button-icon",
      "cancel-button-text",
      "clear-icon",
      "color",
      "debounce",
      "disabled",
      "enterkeyhint",
      "inputmode",
      "mode",
      "placeholder",
      "search-icon",
      "show-cancel-button",
      "spellcheck",
      "type",
      "value"
    ],
    "description": "Searchbars represent a text field that can be used to search through a collection. They can be displayed inside of a toolbar or the main content.\n\nA Searchbar should be used instead of an input to search lists. A clear button is displayed upon entering input in the searchbar's text field. Clicking on the clear button will erase the text field and the input will remain focused. A cancel button can be enabled which will clear the input and lose the focus upon click."
  },
  "ion-segment": {
    "attributes": [
      "color",
      "disabled",
      "mode",
      "scrollable",
      "value"
    ],
    "description": "Segments display a group of related buttons, sometimes known as segmented controls, in a horizontal row. They can be displayed inside of a toolbar or the main content.\n\nTheir functionality is similar to tabs, where selecting one will deselect all others. Segments are useful for toggling between different views inside of the content. Tabs should be used instead of a segment when clicking on a control should navigate between pages."
  },
  "ion-segment-button": {
    "attributes": [
      "disabled",
      "layout",
      "mode",
      "type",
      "value"
    ],
    "description": "Segment buttons are groups of related buttons inside of a [Segment](../segment). They are displayed in a horizontal row. A segment button can be checked by default by adding the `checked` attribute or by setting the `value` of the segment to the `value` of the segment button. Only one segment button should be selected at a time."
  },
  "ion-select": {
    "attributes": [
      "cancel-text",
      "compare-with",
      "disabled",
      "interface",
      "interface-options",
      "mode",
      "multiple",
      "name",
      "ok-text",
      "placeholder",
      "selected-text",
      "value"
    ],
    "description": "Selects are form controls to select an option, or options, from a set of options, similar to a native `<select>` element. When a user taps the select, a dialog appears with all of the options in a large, easy to select list.\n\nA select should be used with child `<ion-select-option>` elements. If the child option is not given a `value` attribute then its text will be used as the value.\n\nIf `value` is set on the `<ion-select>`, the selected option will be chosen based on that value."
  },
  "ion-select-option": {
    "attributes": [
      "disabled",
      "value"
    ],
    "description": "Select Options are components that are child elements of a Select. Each option defined is passed and displayed in the Select dialog. For more information, see the [Select docs](../select)."
  },
  "ion-skeleton-text": {
    "attributes": [
      "animated"
    ],
    "description": "Skeleton Text is a component for rendering placeholder content. The element will render a gray block at the specified width."
  },
  "ion-slide": {
    "attributes": [],
    "description": "The Slide component is a child component of [Slides](../slides). The template\nshould be written as `ion-slide`. Any slide content should be written\nin this component and it should be used in conjunction with [Slides](../slides).\n\nSee the [Slides API Docs](../slides) for more usage information."
  },
  "ion-slides": {
    "attributes": [
      "mode",
      "options",
      "pager",
      "scrollbar"
    ],
    "description": "The Slides component is a multi-section container. Each section can be swiped\nor dragged between. It contains any number of [Slide](../slide) components.\n\n\nAdopted from Swiper.js:\nThe most modern mobile touch slider and framework with hardware accelerated transitions.\n\nhttp://www.idangero.us/swiper/\n\nCopyright 2016, Vladimir Kharlampidi\nThe iDangero.us\nhttp://www.idangero.us/\n\nLicensed under MIT"
  },
  "ion-spinner": {
    "attributes": [
      "color",
      "duration",
      "name",
      "paused"
    ],
    "description": "The Spinner component provides a variety of animated SVG spinners. Spinners are visual indicators that the app is loading content or performing another process that the user needs to wait on.\n\nThe default spinner to use is based on the platform. The default spinner for `ios` is `\"lines\"`, and the default for `android` is `\"crescent\"`. If the platform is not `ios` or `android`, the spinner will default to `crescent`. If the `name` property is set, then that spinner will be used instead of the platform specific spinner."
  },
  "ion-split-pane": {
    "attributes": [
      "content-id",
      "disabled",
      "when"
    ],
    "description": "A split pane is useful when creating multi-view layouts. It allows UI elements, like menus, to be\ndisplayed as the viewport width increases.\n\nIf the device's screen width is below a certain size, the split pane will collapse and the menu will be hidden. This is ideal for creating an app that will be served in a browser and deployed through the app store to phones and tablets."
  },
  "ion-tab": {
    "attributes": [
      "component",
      "tab"
    ],
    "description": "The tab component is a child component of [tabs](../tabs). Each tab can contain a top level navigation stack for an app or a single view. An app can have many tabs, all with their own independent navigation.\n\nSee the [tabs documentation](../tabs/) for more details on configuring tabs."
  },
  "ion-tab-bar": {
    "attributes": [
      "color",
      "mode",
      "selected-tab",
      "translucent"
    ],
    "description": "The tab bar is a UI component that contains a set of [tab buttons](../tab-button). A tab bar must be provided inside of [tabs](../tabs) to communicate with each [tab](../tab)."
  },
  "ion-tab-button": {
    "attributes": [
      "disabled",
      "download",
      "href",
      "layout",
      "mode",
      "rel",
      "selected",
      "tab",
      "target"
    ],
    "description": "A tab button is a UI component that is placed inside of a [tab bar](../tab-bar). The tab button can specify the layout of the icon and label and connect to a [tab view](../tab).\n\nSee the [tabs documentation](../tabs) for more details on configuring tabs."
  },
  "ion-tabs": {
    "attributes": [],
    "description": "Tabs are a top level navigation component to implement a tab-based navigation.\nThe component is a container of individual [Tab](../tab/) components.\n\nThe `ion-tabs` component does not have any styling and works as a router outlet in order to handle navigation. It does not provide any UI feedback or mechanism to switch between tabs. In order to do so, an `ion-tab-bar` should be provided as a direct child of `ion-tabs`.\n\nBoth `ion-tabs` and `ion-tab-bar` can be used as standalone elements. They don’t depend on each other to work, but they are usually used together in order to implement a tab-based navigation that behaves like a native app.\n\nThe `ion-tab-bar` needs a slot defined in order to be projected to the right place in an `ion-tabs` component."
  },
  "ion-text": {
    "attributes": [
      "color",
      "mode"
    ],
    "description": "The text component is a simple component that can be used to style the text color of any element. The `ion-text` element should wrap the element in order to change the text color of that element."
  },
  "ion-textarea": {
    "attributes": [
      "auto-grow",
      "autocapitalize",
      "autofocus",
      "clear-on-edit",
      "color",
      "cols",
      "debounce",
      "disabled",
      "enterkeyhint",
      "inputmode",
      "maxlength",
      "minlength",
      "mode",
      "name",
      "placeholder",
      "readonly",
      "required",
      "rows",
      "spellcheck",
      "value",
      "wrap"
    ],
    "description": "The textarea component is used for multi-line text input. A native textarea element is rendered inside of the component. The user experience and interactivity of the textarea component is improved by having control over the native textarea.\n\nUnlike the native textarea element, the Ionic textarea does not support loading its value from the inner content. The textarea value should be set in the `value` attribute.\n\nThe textarea component accepts the [native textarea attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) in addition to the Ionic properties."
  },
  "ion-thumbnail": {
    "attributes": [],
    "description": "Thumbnails are square components that usually wrap an image or icon. They can be used to make it easier to display a group of larger images or provide a preview of the full-size image.\n\nThumbnails can be used by themselves or inside of any element. If placed inside of an `ion-item`, the thumbnail will resize to fit the parent component. To position a thumbnail on the left or right side of an item, set the slot to `start` or `end`, respectively."
  },
  "ion-title": {
    "attributes": [
      "color",
      "size"
    ],
    "description": "`ion-title` is a component that sets the title of the `Toolbar`."
  },
  "ion-toast": {
    "attributes": [
      "animated",
      "color",
      "css-class",
      "duration",
      "header",
      "keyboard-close",
      "message",
      "mode",
      "position",
      "translucent"
    ],
    "description": "A Toast is a subtle notification commonly used in modern applications. It can be used to provide feedback about an operation or to display a system message. The toast appears on top of the app's content, and can be dismissed by the app to resume user interaction with the app."
  },
  "ion-toggle": {
    "attributes": [
      "checked",
      "color",
      "disabled",
      "mode",
      "name",
      "value"
    ],
    "description": "Toggles change the state of a single option. Toggles can be switched on or off by pressing or swiping them. They can also be checked programmatically by setting the `checked` property."
  },
  "ion-toolbar": {
    "attributes": [
      "color",
      "mode"
    ],
    "description": "Toolbars are positioned above or below content. When a toolbar is placed in an `<ion-header>` it will appear fixed at the top of the content, and when it is in an `<ion-footer>` it will appear fixed at the bottom. Fullscreen content will scroll behind a toolbar in a header or footer. When placed within an `<ion-content>`, toolbars will scroll with the content."
  },
  "ion-virtual-scroll": {
    "attributes": [
      "approx-footer-height",
      "approx-header-height",
      "approx-item-height"
    ],
    "description": "Virtual Scroll displays a virtual, \"infinite\" list. An array of records\nis passed to the virtual scroll containing the data to create templates\nfor. The template created for each record, referred to as a cell, can\nconsist of items, headers, and footers. For performance reasons, not every record\nin the list is rendered at once; instead a small subset of records (enough to fill the viewport)\nare rendered and reused as the user scrolls."
  }
}